buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://maven.parchmentmc.org' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

version = '1.0.0'
group = 'ozokuz.stonehaul'
archivesBaseName = 'stonehaul'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

mixin {
    add sourceSets.main, "stonehaul.refmap.json"
}

minecraft {
    mappings channel: 'parchment', version: '2022.11.06-1.18.2'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'stonehaul'

            mods {
                stonehaul {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'stonehaul'

            mods {
                stonehaul {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            property 'forge.enabledGameTestNamespaces', 'stonehaul'

            mods {
                stonehaul {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            args '--mod', 'stonehaul', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                stonehaul {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url 'https://maven.tterrag.com/' } // Registrate
    maven { url 'https://maven.blamejared.com' } // JEI
    maven {
        url "https://cursemaven.com"
        content { includeGroup "curse.maven" }
    }
    maven {
        // Shedaniel's maven (Architectury API)
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }

    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
}

dependencies {
    // Forge
    minecraft 'net.minecraftforge:forge:1.18.2-40.2.9'

    // Registrate
    implementation fg.deobf('com.tterrag.registrate:Registrate:MC1.18.2-1.1.3')
    jarJar(group: 'com.tterrag.registrate', name: 'Registrate', version: '[MC1.18.2,MC1.19)')

    // KubeJS
    implementation fg.deobf("dev.latvian.mods:kubejs-forge:1802.5.5-build.569")
    implementation fg.deobf("dev.latvian.mods:rhino-forge:1802.2.1-build.255")
    implementation fg.deobf("dev.architectury:architectury-forge:4.11.93")

    // Farmers Delight
    implementation fg.deobf('curse.maven:farmers-delight-398521:4636009')
    // Make less noise, pls
    runtimeOnly fg.deobf('curse.maven:lazy-dfu-forge-460819:3544496')

    // JEI
    compileOnly fg.deobf('mezz.jei:jei-1.18.2-common-api:10.2.1.1005')
    compileOnly fg.deobf('mezz.jei:jei-1.18.2-forge-api:10.2.1.1005')
    runtimeOnly fg.deobf('mezz.jei:jei-1.18.2-forge:10.2.1.1005')

    // Mixins
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "stonehaul",
                "Specification-Vendor"    : "ozokuz",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "ozokuz",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    classifier 'slim'
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

jarJar.enable()

reobf {
    jarJar {}
}

tasks.jarJar.finalizedBy('reobfJarJar')
tasks.jarJar.configure {
    classifier ''
}
